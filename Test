## Adding a new user using cli
```bash
sqlplus / as sysdba
```
```sql
CREATE USER C##admin IDENTIFIED BY Password1;
alter user C##admin identified by Pass2019$;
alter user C##admin identified by Password1;
GRANT ALL PRIVILEGES TO admin;
GRANT CONNECT, RESOURCE TO C##admin;
GRANT DBA TO C##admin;
GRANT SYSDBA TO C##admin;


CREATE USER micky IDENTIFIED BY Password1;
```
# Using `cx_Oracle`
## Creating a table
```python
import cx_Oracle

# Connection details
username = 'C##admin'
password = 'Password1'
dsn = '127.0.0.1:1521/FREE'  # Adjust the DSN if your service name is different

# Establish the database connection
try:
    conn = cx_Oracle.connect(user=username, password=password, dsn=dsn)
    print("Successfully connected to Oracle Database")

    with conn.cursor() as cur:
        # Create the USER table
        create_table_user = """
        CREATE TABLE USER (
            id NUMBER GENERATED BY DEFAULT AS IDENTITY,
            firstName VARCHAR2(50),
            lastName VARCHAR2(50),
            username VARCHAR2(50) UNIQUE,
            email VARCHAR2(100) UNIQUE,
            PRIMARY KEY (id)
        )
        """

        cur.execute(create_table_user)
        print("Table USER created successfully")

    # Commit the changes
    conn.commit()
except cx_Oracle.DatabaseError as e:
    error, = e.args
    print(f"Error: {error.message}")
    print(f"Code: {error.code}")
finally:
    if 'conn' in locals() and conn:
        conn.close()
        print("Connection closed")
```

## Function to execute queries
```python
import cx_Oracle

def execute_query(query, params=None):
    # Connection details
    username = 'admin'
    password = 'Password1'
    dsn = '127.0.0.1:1521/FREEPDB1'  # Adjust as needed

    try:
        # Establish the database connection
        conn = cx_Oracle.connect(user=username, password=password, dsn=dsn)
        print("Successfully connected to Oracle Database")

        with conn.cursor() as cur:
            # Execute the query
            cur.execute(query, params)

            # If the query is a SELECT statement, fetch the results
            if query.strip().upper().startswith("SELECT"):
                results = cur.fetchall()
                return results
            else:
                # For other queries, commit the changes
                conn.commit()
                return None
    except cx_Oracle.DatabaseError as e:
        error, = e.args
        print(f"Error: {error.message}")
        print(f"Code: {error.code}")
        return None
    finally:
        if 'conn' in locals() and conn:
            conn.close()
            print("Connection closed")

```
# Using `oracledb` python package
## Test connection - `Hello World`
```python
import oracledb

# Connection details
username = 'C##admin'
password = 'Password1'
dsn = '127.0.0.1:1521/FREE'  # Replace with your actual service name if different

# Establish the database connection
try:
    conn = oracledb.connect(user=username, password=password, dsn=dsn)
    print("Successfully connected to Oracle Database")
    
    with conn.cursor() as cur:
        # Test the connection
        cur.execute("SELECT 'Hello World!' FROM dual")
        res = cur.fetchall()
        print(res)
except oracledb.DatabaseError as e:
    error, = e.args
    print(f"Error: {error.message}")
    print(f"Code: {error.code}")
finally:
    if 'conn' in locals() and conn:
        conn.close()

```

## Generate a Table
```python
import oracledb

# Connection details
username = 'C##admin'
password = 'Password1'
dsn = '127.0.0.1:1521/FREE'  # Adjust the DSN if your service name is different

try:
    # Establish the database connection
    conn = oracledb.connect(user=username, password=password, dsn=dsn)
    print("Successfully connected to Oracle Database")

    with conn.cursor() as cur:
        # Create the USER table
        create_table_user = """
        CREATE TABLE USERS (
            id NUMBER GENERATED BY DEFAULT AS IDENTITY,
            firstName VARCHAR2(50),
            lastName VARCHAR2(50),
            username VARCHAR2(50) UNIQUE,
            email VARCHAR2(100) UNIQUE,
            PRIMARY KEY (id)
        )
        """

        cur.execute(create_table_user)
        print("Table USER created successfully")

    # Commit the changes
    conn.commit()
except oracledb.DatabaseError as e:
    error, = e.args
    print(f"Error: {error.message}")
    print(f"Code: {error.code}")
finally:
    if 'conn' in locals() and conn:
        conn.close()
        print("Connection closed")

```

## Function to execute queries
```python
import oracledb

def execute_query(query, params=None):
    # Connection details
    username = 'C##admin'
    password = 'Password1'
    dsn = '127.0.0.1:1521/FREE'  # Adjust as needed

    try:
        # Establish the database connection
        conn = oracledb.connect(user=username, password=password, dsn=dsn)
        print("Successfully connected to Oracle Database")

        with conn.cursor() as cur:
            # Execute the query
            cur.execute(query, params)

            # If the query is a SELECT statement, fetch the results
            if query.strip().upper().startswith("SELECT"):
                results = cur.fetchall()
                return results
            else:
                # For other queries, commit the changes
                conn.commit()
                return None
    except oracledb.DatabaseError as e:
        error, = e.args
        print(f"Error: {error.message}")
        print(f"Code: {error.code}")
        return None
    finally:
        if 'conn' in locals() and conn:
            conn.close()
            print("Connection closed")

```

## Sample Data
```python
import oracledb

# Connection details
username = 'C##admin'
password = 'Password1'
dsn = '127.0.0.1:1521/FREE'  # Updated DSN

# Sample names and data
sample_data = [
    ('John', 'Doe', 'johndoe', 'john.doe@example.com'),
    ('Jane', 'Smith', 'janesmith', 'jane.smith@example.com'),
    ('Michael', 'Johnson', 'michaelj', 'michael.johnson@example.com'),
    ('Emily', 'Davis', 'emilyd', 'emily.davis@example.com'),
    ('William', 'Brown', 'williamb', 'will.brown@example.com'),
    ('Olivia', 'Jones', 'oliviaj', 'olivia.jones@example.com'),
    ('James', 'Garcia', 'jamesg', 'james.garcia@example.com'),
    ('Sophia', 'Martinez', 'sophiam', 'sophia.martinez@example.com'),
    ('Benjamin', 'Hernandez', 'benjaminh', 'ben.hernandez@example.com'),
    ('Ava', 'Lopez', 'aval', 'ava.lopez@example.com'),
    ('Lucas', 'Wilson', 'lucasw', 'lucas.wilson@example.com'),
    ('Mia', 'Anderson', 'miaa', 'mia.anderson@example.com'),
    ('Ethan', 'Thomas', 'ethant', 'ethan.thomas@example.com'),
    ('Isabella', 'Taylor', 'isabellat', 'isabella.taylor@example.com'),
    ('Alexander', 'Moore', 'alexanderm', 'alex.moore@example.com'),
]

# Establish the database connection
conn = oracledb.connect(user=username, password=password, dsn=dsn)

try:
    with conn.cursor() as cur:
        insert_query = """
        INSERT INTO USERS (firstName, lastName, username, email)
        VALUES (:1, :2, :3, :4)
        """

        # Insert each sample record
        for data in sample_data:
            cur.execute(insert_query, data)

    # Commit the changes
    conn.commit()
    print("Sample data inserted successfully.")
except oracledb.DatabaseError as e:
    error, = e.args
    print(f"Error: {error.message}")
    print(f"Code: {error.code}")
finally:
    if 'conn' in locals() and conn:
        conn.close()
        print("Connection closed.")

```
